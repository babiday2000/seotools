import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Clipboard, ClipboardCheck } from 'lucide-react';
const HtmlEncoderTool = () => {
    const [decodedHtml, setDecodedHtml] = useState('');
    const [encodedHtml, setEncodedHtml] = useState('');
    const [copied, setCopied] = useState(false);
    const handleEncode = () => {
        try {
            const encoded = decodedHtml.replace(/[\u00A0-\u9999<>&"']/g, (i) => {
                return '&#' + i.charCodeAt(0) + ';';
            });
            setEncodedHtml(encoded);
        }
        catch {
            setEncodedHtml('Invalid HTML to encode.');
        }
    };
    const handleCopy = () => {
        navigator.clipboard.writeText(encodedHtml);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: [_jsx(Textarea, { placeholder: "Enter HTML here...", className: "h-48 text-base", value: decodedHtml, onChange: (e) => setDecodedHtml(e.target.value) }), _jsxs("div", { className: "relative", children: [_jsx(Textarea, { placeholder: "Encoded HTML will appear here...", className: "h-48 text-base", value: encodedHtml, readOnly: true }), _jsx(Button, { variant: "ghost", size: "icon", className: "absolute top-2 right-2", onClick: handleCopy, disabled: !encodedHtml, children: copied ? _jsx(ClipboardCheck, { className: "h-5 w-5 text-green-500" }) : _jsx(Clipboard, { className: "h-5 w-5" }) })] })] }), _jsx(Button, { onClick: handleEncode, disabled: !decodedHtml, children: "Encode HTML" }), _jsxs("div", { className: "max-w-4xl mx-auto space-y-12 text-left", children: [_jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "What is HTML Encoding?" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsxs("p", { children: ["HTML encoding is the process of converting special characters into their respective HTML entities. This ensures that these characters are displayed as literal text in a web browser, rather than being interpreted as HTML code. For example, the less-than symbol (", _jsx("code", { children: '<' }), ") is a fundamental part of HTML syntax, used to open tags. If you want to display this symbol on a webpage as text, you must encode it as ", _jsx("code", { children: '<' }), ". HTML encoding is a critical security practice to prevent Cross-Site Scripting (XSS) attacks and to ensure that content is rendered correctly."] }), _jsx("p", { children: "This process is essential for web developers, content creators, and anyone who handles user-generated content. By encoding potentially harmful characters, you can safely embed text within an HTML document without risking unintended code execution or broken layouts." })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Factors Requiring HTML Encoding" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "You need to encode HTML in various situations to maintain security and content integrity:" }), _jsxs("ul", { className: "list-disc list-inside space-y-3 pl-4", children: [_jsxs("li", { children: [_jsx("strong", { children: "Displaying Code Snippets:" }), " To show HTML, CSS, or JavaScript code examples on a webpage, you must encode the special characters so the browser displays the code as text instead of executing it."] }), _jsxs("li", { children: [_jsx("strong", { children: "Handling User-Generated Content:" }), " Any input from users, such as comments, forum posts, or profile information, should be HTML-encoded before being displayed on a page. This prevents malicious users from injecting scripts that could harm other visitors."] }), _jsxs("li", { children: [_jsx("strong", { children: "Storing Data in Databases:" }), " When storing text that might contain special HTML characters in a database, encoding it first can prevent issues when that data is later retrieved and displayed on a web page."] }), _jsxs("li", { children: [_jsx("strong", { children: "Generating Content Dynamically:" }), " When creating HTML content on the server-side (e.g., from an API response or a database query), it's crucial to encode any dynamic text values to ensure they are rendered safely."] })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Key Components of HTML Encoding" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "HTML encoding involves replacing a specific set of characters with their corresponding HTML entities. The most important characters to encode are:" }), _jsxs("ul", { className: "list-disc list-inside space-y-3 pl-4", children: [_jsxs("li", { children: [_jsxs("strong", { children: [_jsx("code", { children: '&' }), " (Ampersand)"] }), " becomes ", _jsx("code", { children: '&' })] }), _jsxs("li", { children: [_jsxs("strong", { children: [_jsx("code", { children: '<' }), " (Less-than)"] }), " becomes ", _jsx("code", { children: '<' })] }), _jsxs("li", { children: [_jsxs("strong", { children: [_jsx("code", { children: '>' }), " (Greater-than)"] }), " becomes ", _jsx("code", { children: '>' })] }), _jsxs("li", { children: [_jsxs("strong", { children: [_jsx("code", { children: '"' }), " (Double quote)"] }), " becomes ", _jsx("code", { children: '"' })] }), _jsxs("li", { children: [_jsxs("strong", { children: [_jsx("code", { children: "'" }), " (Single quote)"] }), " becomes ", _jsx("code", { children: "'" }), " or ", _jsx("code", { children: '&#39;' })] })] }), _jsx("p", { children: "The encoding process involves finding these characters in a string and replacing them with their entity equivalents, making the text safe for display within an HTML context." })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "How to Use Our HTML Encoder Tool" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "Our tool simplifies the process of HTML encoding:" }), _jsxs("ol", { className: "list-decimal list-inside space-y-3 pl-4", children: [_jsxs("li", { children: [_jsx("strong", { children: "Enter Your Text:" }), " Paste the plain text or code you want to encode into the input text area."] }), _jsxs("li", { children: [_jsx("strong", { children: "Click the Encode Button:" }), " Press the \"Encode HTML\" button. The tool will process your input and convert all special characters into their safe HTML entity equivalents."] }), _jsxs("li", { children: [_jsx("strong", { children: "Copy the Encoded HTML:" }), " The resulting encoded string will appear in the output area, ready for you to copy and paste into your HTML document."] })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Frequently Asked Questions (FAQ)" }), _jsxs("div", { className: "mt-4 space-y-6", children: [_jsxs("div", { children: [_jsxs("h3", { className: "font-semibold", children: ["Why can't I just type ", _jsx("code", { children: '<' }), " on my webpage?"] }), _jsxs("p", { className: "text-muted-foreground mt-1", children: ["Because the browser will interpret it as the start of an HTML tag. This can break your page layout or, in a worst-case scenario, create a security vulnerability. Encoding it as ", _jsx("code", { children: '<' }), " tells the browser to treat it as a literal character."] })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold", children: "Is HTML encoding the same as URL encoding?" }), _jsx("p", { className: "text-muted-foreground mt-1", children: "No. HTML encoding is for making text safe to display on a webpage. URL encoding is for making text safe to include in a URL. They encode different characters and are used for different purposes." })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold", children: "Does this tool prevent all XSS attacks?" }), _jsx("p", { className: "text-muted-foreground mt-1", children: "HTML encoding is a primary defense against Cross-Site Scripting (XSS), but it should be part of a comprehensive security strategy. Always follow best practices for web security, including input validation and using modern frameworks that handle sanitization automatically." })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Fun Fact" }), _jsx("div", { className: "mt-4 space-y-4 text-muted-foreground", children: _jsx("p", { children: "The concept of \"escaping\" characters to prevent them from being interpreted as code is not unique to HTML. It's a fundamental principle in almost every programming language and data format. For example, in many languages, you use a backslash (`\\`) to escape quotes within a string, like `\"He said, \\\"Hello!\\\"\"`. HTML's entity system is just its own unique way of solving this common problem." }) })] })] })] }));
};
export default HtmlEncoderTool;
