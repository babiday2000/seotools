import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Clipboard, ClipboardCheck } from 'lucide-react';
import { Input } from '@/components/ui/input';
const UrlRewritingTool = () => {
    const [dynamicUrl, setDynamicUrl] = useState('');
    const [staticUrl, setStaticUrl] = useState('');
    const [rewrittenCode, setRewrittenCode] = useState('');
    const [copied, setCopied] = useState(false);
    const handleGenerate = () => {
        if (!dynamicUrl || !staticUrl)
            return;
        const code = `RewriteEngine On\nRewriteRule ^${staticUrl}$ ${dynamicUrl} [NC,L]`;
        setRewrittenCode(code);
    };
    const handleCopy = () => {
        navigator.clipboard.writeText(rewrittenCode);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-1 gap-4 md:grid-cols-2", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Input, { placeholder: "Dynamic URL (e.g., product.php?id=123)", value: dynamicUrl, onChange: (e) => setDynamicUrl(e.target.value) }), _jsx(Input, { placeholder: "Static URL (e.g., product/123)", value: staticUrl, onChange: (e) => setStaticUrl(e.target.value) })] }), _jsxs("div", { className: "relative", children: [_jsx(Textarea, { placeholder: "Generated rewrite rule will appear here...", className: "h-48 text-base", value: rewrittenCode, readOnly: true }), _jsx(Button, { variant: "ghost", size: "icon", className: "absolute top-2 right-2", onClick: handleCopy, disabled: !rewrittenCode, children: copied ? _jsx(ClipboardCheck, { className: "h-5 w-5 text-green-500" }) : _jsx(Clipboard, { className: "h-5 w-5" }) })] })] }), _jsx(Button, { onClick: handleGenerate, disabled: !dynamicUrl || !staticUrl, children: "Generate Rewrite Rule" }), _jsxs("div", { className: "max-w-4xl mx-auto space-y-12 text-left", children: [_jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "What is URL Rewriting?" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "URL rewriting is a server-side technique used to transform a complex, dynamic URL into a clean, static-looking, and user-friendly one. Dynamic URLs, often generated by content management systems or e-commerce platforms, typically contain query parameters (e.g., `product.php?id=123`). While functional, these URLs are often long, difficult to read, and not ideal for search engine optimization (SEO) or user experience." }), _jsx("p", { children: "URL rewriting intercepts a request for a \"pretty\" URL (like `/products/awesome-widget`) and translates it internally to the \"ugly\" dynamic URL (`/product.php?id=123`) that the server understands. This process is completely transparent to the user, who only ever sees the clean URL in their browser's address bar. The primary benefit is creating memorable, shareable, and keyword-rich URLs that are favored by both users and search engines, leading to better usability and improved SEO performance." })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Factors to Consider for URL Rewriting" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "Implementing URL rewriting requires careful planning. Here are some key factors to consider:" }), _jsxs("ul", { className: "list-disc list-inside space-y-3 pl-4", children: [_jsxs("li", { children: [_jsx("strong", { children: "Server Environment:" }), " URL rewriting is most commonly handled by the `mod_rewrite` module on Apache servers. If you're using a different server like Nginx, the syntax and configuration file will be different. Our tool generates rules specifically for Apache's `.htaccess` file."] }), _jsxs("li", { children: [_jsx("strong", { children: "SEO Implications:" }), " When rewriting URLs for an existing site, it's crucial to also implement 301 redirects from the old dynamic URLs to the new static ones. This ensures that search engines transfer any existing ranking value to the new URLs."] }), _jsxs("li", { children: [_jsx("strong", { children: "Complexity and Performance:" }), " While powerful, complex `.htaccess` files with many rewrite rules can slightly impact server performance, as the server has to process the file for each request. It's important to keep your rules as efficient as possible."] }), _jsxs("li", { children: [_jsx("strong", { children: "Regular Expressions (Regex):" }), " URL rewriting relies heavily on regular expressions to define the patterns for matching and transforming URLs. A solid understanding of regex is helpful for creating custom or complex rules."] })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Key Components of a URL Rewrite Rule" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "A typical URL rewrite rule in an `.htaccess` file has several distinct parts that work together:" }), _jsxs("ul", { className: "list-disc list-inside space-y-3 pl-4", children: [_jsxs("li", { children: [_jsx("strong", { children: "`RewriteEngine On`" }), ": This directive must be present at the top of your `.htaccess` file to enable the rewriting engine. Without it, all subsequent `RewriteRule` directives will be ignored."] }), _jsxs("li", { children: [_jsx("strong", { children: "`RewriteRule`" }), ": This is the core directive that defines the rewriting logic. It consists of three parts:", _jsxs("ul", { className: "list-disc list-inside space-y-2 pl-6 mt-2", children: [_jsxs("li", { children: [_jsx("strong", { children: "Pattern:" }), " A regular expression that matches the incoming URL path. For example, `^product/([0-9]+)$` would match URLs like `product/123`."] }), _jsxs("li", { children: [_jsx("strong", { children: "Substitution:" }), " The actual file path the server should process. It can include back-references (like `$1`) to use parts of the matched pattern. For the example above, the substitution would be `product.php?id=$1`."] }), _jsxs("li", { children: [_jsx("strong", { children: "Flags:" }), " Optional parameters in square brackets `[...]` that modify the rule's behavior. Common flags include `[L]` (Last rule), `[NC]` (No Case), and `[QSA]` (Query String Append)."] })] })] }), _jsxs("li", { children: [_jsx("strong", { children: "`RewriteCond` (Optional)" }), ": The `RewriteCond` (Rewrite Condition) directive allows you to add conditions to a `RewriteRule`. The rule will only be executed if the conditions are met. This is useful for more complex scenarios, like checking if a file exists before applying a rule."] })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "How to Use Our URL Rewriting Tool" }), _jsxs("div", { className: "mt-4 space-y-4 text-muted-foreground", children: [_jsx("p", { children: "Our tool simplifies the process of creating `.htaccess` rewrite rules. Follow these steps:" }), _jsxs("ol", { className: "list-decimal list-inside space-y-3 pl-4", children: [_jsxs("li", { children: [_jsx("strong", { children: "Enter the Dynamic URL:" }), " In the first field, enter the structure of your dynamic URL, such as `product.php?id=123`."] }), _jsxs("li", { children: [_jsx("strong", { children: "Enter the Desired Static URL:" }), " In the second field, enter the clean, static URL structure you want users to see, like `product/123`."] }), _jsxs("li", { children: [_jsx("strong", { children: "Generate the Rule:" }), " Click the \"Generate Rewrite Rule\" button. Our tool will create the necessary `RewriteRule` based on your input."] }), _jsxs("li", { children: [_jsx("strong", { children: "Implement the Rule:" }), " Copy the generated code. Paste it into your website's `.htaccess` file, making sure the `RewriteEngine On` directive is included above your rules. Always back up your `.htaccess` file before making changes."] })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Frequently Asked Questions (FAQ)" }), _jsxs("div", { className: "mt-4 space-y-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "font-semibold", children: "What is the difference between URL rewriting and URL redirection?" }), _jsx("p", { className: "text-muted-foreground mt-1", children: "URL rewriting is a server-side process that happens invisibly to the user. The URL in the browser bar does not change. A URL redirect, on the other hand, is a client-side instruction. The server tells the browser to go to a different URL, and the address in the browser bar changes. Rewriting is for making URLs pretty; redirecting is for sending users and search engines to a different location (e.g., after a page has moved)." })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold", children: "Do I need to restart my server after editing `.htaccess`?" }), _jsx("p", { className: "text-muted-foreground mt-1", children: "No. Changes to an `.htaccess` file are applied immediately. Apache reads the file on every request, which is what makes it so flexible but also slightly less performant than making changes in the main server configuration file." })] }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold", children: "Can URL rewriting create duplicate content issues?" }), _jsx("p", { className: "text-muted-foreground mt-1", children: "Yes, if not handled correctly. If both the dynamic URL and the rewritten static URL are accessible to search engines, it can be seen as duplicate content. This is why it's important to use canonical tags or 301 redirects to establish the \"correct\" version of the URL." })] })] })] }), _jsxs("section", { children: [_jsx("h2", { className: "text-2xl font-bold tracking-tight", children: "Fun Fact" }), _jsx("div", { className: "mt-4 space-y-4 text-muted-foreground", children: _jsx("p", { children: "The `mod_rewrite` module for Apache, which is the engine behind most URL rewriting on the web, was originally a third-party commercial add-on. It was created by Ralf S. Engelschall in the late 1990s and later became so popular and essential that it was eventually integrated into the Apache HTTP Server as a standard module." }) })] })] })] }));
};
export default UrlRewritingTool;
